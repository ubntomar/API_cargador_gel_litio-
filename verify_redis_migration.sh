#!/bin/bash
# Verificaci√≥n de migraci√≥n a Redis para configuraciones personalizadas

API_URL="http://localhost:8000"
REMOTE_URL="http://192.168.13.180:8000"

echo "üîç VERIFICACI√ìN DE MIGRACI√ìN A REDIS"
echo "======================================"

# Seleccionar URL seg√∫n disponibilidad
if curl -s --connect-timeout 3 "$API_URL/health" > /dev/null 2>&1; then
    BASE_URL="$API_URL"
    echo "‚úÖ Usando API local: $BASE_URL"
elif curl -s --connect-timeout 3 "$REMOTE_URL/health" > /dev/null 2>&1; then
    BASE_URL="$REMOTE_URL"
    echo "‚úÖ Usando API remota: $BASE_URL"
else
    echo "‚ùå ERROR: No se puede conectar a ninguna API"
    exit 1
fi

echo ""

# 1. Verificar informaci√≥n de storage
echo "üìä 1. Verificando informaci√≥n de storage..."
STORAGE_INFO=$(curl -s "$BASE_URL/config/custom/configurations/storage-info")
echo "$STORAGE_INFO" | python3 -m json.tool 2>/dev/null || echo "$STORAGE_INFO"
echo ""

# 2. Verificar configuraciones existentes ANTES de migraci√≥n
echo "üìã 2. Configuraciones existentes..."
CONFIGS_BEFORE=$(curl -s "$BASE_URL/config/custom/configurations")
COUNT_BEFORE=$(echo "$CONFIGS_BEFORE" | grep -o '"total_count":[0-9]*' | cut -d':' -f2)
echo "Total configuraciones antes: $COUNT_BEFORE"
echo ""

# 3. Ejecutar migraci√≥n
echo "üîÑ 3. Ejecutando migraci√≥n a Redis..."
MIGRATION_RESULT=$(curl -s -X POST "$BASE_URL/config/custom/configurations/migrate")
echo "$MIGRATION_RESULT" | python3 -m json.tool 2>/dev/null || echo "$MIGRATION_RESULT"
echo ""

# 4. Verificar configuraciones DESPU√âS de migraci√≥n
echo "‚úÖ 4. Verificando configuraciones despu√©s de migraci√≥n..."
sleep 2  # Dar tiempo para que se complete
CONFIGS_AFTER=$(curl -s "$BASE_URL/config/custom/configurations")
COUNT_AFTER=$(echo "$CONFIGS_AFTER" | grep -o '"total_count":[0-9]*' | cut -d':' -f2)
echo "Total configuraciones despu√©s: $COUNT_AFTER"
echo ""

# 5. Verificar informaci√≥n de storage actualizada
echo "üìä 5. Informaci√≥n de storage post-migraci√≥n..."
STORAGE_INFO_AFTER=$(curl -s "$BASE_URL/config/custom/configurations/storage-info")
echo "$STORAGE_INFO_AFTER" | python3 -m json.tool 2>/dev/null || echo "$STORAGE_INFO_AFTER"
echo ""

# 6. Prueba de operaciones con Redis
echo "üß™ 6. Probando operaciones con Redis..."

# Crear configuraci√≥n de prueba
echo "   ‚Ä¢ Creando configuraci√≥n de prueba..."
CREATE_RESULT=$(curl -s -X POST "$BASE_URL/config/custom/configurations/test_redis_migration" \
  -H "Content-Type: application/json" \
  -d '{
    "batteryCapacity": 99.0,
    "isLithium": true,
    "thresholdPercentage": 1.5,
    "maxAllowedCurrent": 9999.0,
    "bulkVoltage": 14.3,
    "absorptionVoltage": 14.3,
    "floatVoltage": 13.5,
    "useFuenteDC": false,
    "fuenteDC_Amps": 0.0,
    "factorDivider": 1
  }')

if echo "$CREATE_RESULT" | grep -q "success"; then
    echo "   ‚úÖ Configuraci√≥n creada exitosamente"
else
    echo "   ‚ùå Error creando configuraci√≥n: $CREATE_RESULT"
fi

# Verificar que se puede leer
echo "   ‚Ä¢ Verificando lectura..."
READ_RESULT=$(curl -s "$BASE_URL/config/custom/configurations/test_redis_migration")
if echo "$READ_RESULT" | grep -q "test_redis_migration"; then
    echo "   ‚úÖ Configuraci√≥n le√≠da exitosamente"
else
    echo "   ‚ùå Error leyendo configuraci√≥n"
fi

# Eliminar configuraci√≥n de prueba
echo "   ‚Ä¢ Eliminando configuraci√≥n de prueba..."
DELETE_RESULT=$(curl -s -X DELETE "$BASE_URL/config/custom/configurations/test_redis_migration")
if echo "$DELETE_RESULT" | grep -q "success"; then
    echo "   ‚úÖ Configuraci√≥n eliminada exitosamente"
else
    echo "   ‚ùå Error eliminando configuraci√≥n: $DELETE_RESULT"
fi

echo ""
echo "üèÜ MIGRACI√ìN COMPLETADA"
echo "======================"

# Resumen final
if [ "$COUNT_BEFORE" = "$COUNT_AFTER" ] && [ "$COUNT_AFTER" -gt 0 ]; then
    echo "‚úÖ √âXITO: Todas las configuraciones migradas correctamente"
    echo "   Configuraciones: $COUNT_AFTER"
    echo "   Storage: Redis (activo)"
else
    echo "‚ö†Ô∏è  VERIFICAR: Revisar resultados de migraci√≥n"
    echo "   Antes: $COUNT_BEFORE | Despu√©s: $COUNT_AFTER"
fi

echo ""
echo "üí° Pr√≥ximos pasos:"
echo "   1. Verificar que no hay errores en logs de la API"
echo "   2. Probar operaciones CRUD desde frontend"
echo "   3. Confirmar que no hay m√°s problemas de concurrencia"
