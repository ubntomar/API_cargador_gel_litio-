#!/usr/bin/env python3
"""
Servicio para gesti√≥n de configuraciones personalizadas
"""

import json
import os
import asyncio
from typing import Dict, Optional, List, Tuple
from datetime import datetime
from pathlib import Path

from core.logger import logger
from models.custom_configurations import (
    CustomConfiguration, 
    ConfigurationImportResponse,
    ConfigurationValidationResponse
)

class CustomConfigurationManager:
    """Gestor de configuraciones personalizadas"""
    
    def __init__(self, config_file_path: str = "configuraciones.json"):
        """
        Inicializar el gestor de configuraciones
        
        Args:
            config_file_path: Ruta al archivo de configuraciones
        """
        self.config_file_path = Path(config_file_path)
        self.lock = asyncio.Lock()
        
        # Asegurar que el directorio existe
        self.config_file_path.parent.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"üìã ConfigurationManager inicializado con archivo: {self.config_file_path}")
    
    async def save_configurations(self, configurations_data: str) -> Dict[str, str]:
        """
        Guardar configuraciones desde string JSON
        
        Args:
            configurations_data: String JSON con las configuraciones
            
        Returns:
            Dict con mensaje y status
            
        Raises:
            ValueError: Si el JSON es inv√°lido
            Exception: Si hay error al guardar
        """
        async with self.lock:
            try:
                # Validar que sea JSON v√°lido
                configurations = json.loads(configurations_data)
                
                if not isinstance(configurations, dict):
                    raise ValueError("Los datos deben ser un objeto JSON")
                
                # Validar cada configuraci√≥n
                validated_configs = {}
                for name, config_data in configurations.items():
                    if not isinstance(config_data, dict):
                        raise ValueError(f"La configuraci√≥n '{name}' debe ser un objeto")
                    
                    # Agregar timestamps si no existen
                    current_time = datetime.now().isoformat()
                    if 'createdAt' not in config_data:
                        config_data['createdAt'] = current_time
                    config_data['updatedAt'] = current_time
                    
                    # Validar estructura usando el modelo Pydantic
                    try:
                        validated_config = CustomConfiguration(**config_data)
                        validated_configs[name] = validated_config.dict()
                    except Exception as e:
                        raise ValueError(f"Error en configuraci√≥n '{name}': {str(e)}")
                
                # Guardar en archivo
                with open(self.config_file_path, 'w', encoding='utf-8') as f:
                    json.dump(validated_configs, f, indent=2, ensure_ascii=False)
                
                logger.info(f"‚úÖ Guardadas {len(validated_configs)} configuraciones en {self.config_file_path}")
                
                return {
                    "message": "Configuraciones guardadas exitosamente",
                    "status": "success"
                }
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå JSON inv√°lido: {e}")
                raise ValueError(f"JSON inv√°lido: {str(e)}")
            except Exception as e:
                logger.error(f"‚ùå Error guardando configuraciones: {e}")
                raise Exception(f"Error al guardar: {str(e)}")
    
    async def load_configurations(self) -> Dict[str, Dict]:
        """
        Cargar configuraciones desde archivo
        
        Returns:
            Dict con las configuraciones cargadas
        """
        async with self.lock:
            try:
                if not self.config_file_path.exists():
                    logger.info("üìã Archivo de configuraciones no existe, devolviendo vac√≠o")
                    return {}
                
                with open(self.config_file_path, 'r', encoding='utf-8') as f:
                    configurations = json.load(f)
                
                logger.info(f"üìã Cargadas {len(configurations)} configuraciones desde {self.config_file_path}")
                return configurations
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error decodificando JSON: {e}")
                return {}
            except Exception as e:
                logger.error(f"‚ùå Error cargando configuraciones: {e}")
                return {}
    
    async def save_single_configuration(self, name: str, configuration: CustomConfiguration) -> Dict[str, str]:
        """
        Guardar una configuraci√≥n individual
        
        Args:
            name: Nombre de la configuraci√≥n
            configuration: Datos de la configuraci√≥n
            
        Returns:
            Dict con mensaje y status
        """
        async with self.lock:
            try:
                # Cargar configuraciones existentes
                existing_configs = await self.load_configurations()
                
                # Actualizar timestamps
                config_dict = configuration.dict()
                current_time = datetime.now().isoformat()
                
                if name in existing_configs:
                    # Mantener fecha de creaci√≥n original
                    config_dict['createdAt'] = existing_configs[name].get('createdAt', current_time)
                else:
                    config_dict['createdAt'] = current_time
                
                config_dict['updatedAt'] = current_time
                
                # Agregar la nueva configuraci√≥n
                existing_configs[name] = config_dict
                
                # Guardar todo
                with open(self.config_file_path, 'w', encoding='utf-8') as f:
                    json.dump(existing_configs, f, indent=2, ensure_ascii=False)
                
                logger.info(f"‚úÖ Configuraci√≥n '{name}' guardada correctamente")
                
                return {
                    "message": f"Configuraci√≥n '{name}' guardada exitosamente",
                    "status": "success"
                }
                
            except Exception as e:
                logger.error(f"‚ùå Error guardando configuraci√≥n '{name}': {e}")
                raise Exception(f"Error al guardar configuraci√≥n: {str(e)}")
    
    async def delete_configuration(self, name: str) -> Dict[str, str]:
        """
        Eliminar una configuraci√≥n espec√≠fica
        
        Args:
            name: Nombre de la configuraci√≥n a eliminar
            
        Returns:
            Dict con mensaje y status
        """
        async with self.lock:
            try:
                # Cargar configuraciones existentes
                configurations = await self.load_configurations()
                
                if name not in configurations:
                    raise ValueError(f"La configuraci√≥n '{name}' no existe")
                
                # Eliminar la configuraci√≥n
                del configurations[name]
                
                # Guardar el archivo actualizado
                with open(self.config_file_path, 'w', encoding='utf-8') as f:
                    json.dump(configurations, f, indent=2, ensure_ascii=False)
                
                logger.info(f"‚úÖ Configuraci√≥n '{name}' eliminada correctamente")
                
                return {
                    "message": f"Configuraci√≥n '{name}' eliminada exitosamente",
                    "status": "success"
                }
                
            except Exception as e:
                logger.error(f"‚ùå Error eliminando configuraci√≥n '{name}': {e}")
                raise Exception(f"Error al eliminar configuraci√≥n: {str(e)}")
    
    async def get_configuration(self, name: str) -> Optional[Dict]:
        """
        Obtener una configuraci√≥n espec√≠fica
        
        Args:
            name: Nombre de la configuraci√≥n
            
        Returns:
            Dict con los datos de la configuraci√≥n o None si no existe
        """
        configurations = await self.load_configurations()
        return configurations.get(name)
    
    async def import_configurations(
        self, 
        configurations_data: str, 
        overwrite_existing: bool = False
    ) -> ConfigurationImportResponse:
        """
        Importar configuraciones desde datos JSON
        
        Args:
            configurations_data: String JSON con configuraciones
            overwrite_existing: Si sobrescribir configuraciones existentes
            
        Returns:
            ConfigurationImportResponse con resultado de la importaci√≥n
        """
        async with self.lock:
            try:
                # Validar JSON
                import_configs = json.loads(configurations_data)
                if not isinstance(import_configs, dict):
                    raise ValueError("Los datos deben ser un objeto JSON")
                
                # Cargar configuraciones existentes
                existing_configs = await self.load_configurations()
                
                imported_count = 0
                skipped_count = 0
                errors = {}
                warnings = {}
                
                for name, config_data in import_configs.items():
                    try:
                        # Verificar si ya existe
                        if name in existing_configs and not overwrite_existing:
                            skipped_count += 1
                            warnings[name] = "Configuraci√≥n ya existe, use overwrite_existing=true para sobrescribir"
                            continue
                        
                        # Validar configuraci√≥n
                        if not isinstance(config_data, dict):
                            errors[name] = "La configuraci√≥n debe ser un objeto"
                            continue
                        
                        # Agregar timestamps
                        current_time = datetime.now().isoformat()
                        if name in existing_configs:
                            # Mantener fecha de creaci√≥n original
                            config_data['createdAt'] = existing_configs[name].get('createdAt', current_time)
                        else:
                            config_data['createdAt'] = current_time
                        config_data['updatedAt'] = current_time
                        
                        # Validar usando modelo Pydantic
                        validated_config = CustomConfiguration(**config_data)
                        existing_configs[name] = validated_config.dict()
                        imported_count += 1
                        
                    except Exception as e:
                        errors[name] = str(e)
                
                # Guardar configuraciones actualizadas
                if imported_count > 0:
                    with open(self.config_file_path, 'w', encoding='utf-8') as f:
                        json.dump(existing_configs, f, indent=2, ensure_ascii=False)
                
                logger.info(f"üìã Importaci√≥n completada: {imported_count} importadas, {skipped_count} omitidas")
                
                return ConfigurationImportResponse(
                    success=len(errors) == 0,
                    imported_count=imported_count,
                    skipped_count=skipped_count,
                    errors=errors if errors else None,
                    warnings=warnings if warnings else None
                )
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå JSON inv√°lido en importaci√≥n: {e}")
                raise ValueError(f"JSON inv√°lido: {str(e)}")
            except Exception as e:
                logger.error(f"‚ùå Error en importaci√≥n: {e}")
                raise Exception(f"Error durante la importaci√≥n: {str(e)}")
    
    async def validate_configuration(self, configuration_data: Dict) -> ConfigurationValidationResponse:
        """
        Validar una configuraci√≥n
        
        Args:
            configuration_data: Datos de la configuraci√≥n
            
        Returns:
            ConfigurationValidationResponse con resultado de validaci√≥n
        """
        try:
            # Intentar crear el modelo Pydantic
            CustomConfiguration(**configuration_data)
            
            return ConfigurationValidationResponse(
                is_valid=True,
                errors=None,
                warnings=None
            )
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Validaci√≥n fall√≥: {e}")
            
            return ConfigurationValidationResponse(
                is_valid=False,
                errors={"validation": str(e)},
                warnings=None
            )
    
    async def export_configurations(self) -> Tuple[str, int]:
        """
        Exportar todas las configuraciones a JSON
        
        Returns:
            Tuple con (contenido_json, cantidad_configuraciones)
        """
        configurations = await self.load_configurations()
        content = json.dumps(configurations, indent=2, ensure_ascii=False)
        
        logger.info(f"üìã Exportadas {len(configurations)} configuraciones")
        
        return content, len(configurations)
    
    def get_file_info(self) -> Dict[str, any]:
        """
        Obtener informaci√≥n del archivo de configuraciones
        
        Returns:
            Dict con informaci√≥n del archivo
        """
        try:
            if self.config_file_path.exists():
                stat = self.config_file_path.stat()
                return {
                    "exists": True,
                    "path": str(self.config_file_path),
                    "size_bytes": stat.st_size,
                    "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                    "created": datetime.fromtimestamp(stat.st_ctime).isoformat()
                }
            else:
                return {
                    "exists": False,
                    "path": str(self.config_file_path),
                    "size_bytes": 0,
                    "modified": None,
                    "created": None
                }
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo info del archivo: {e}")
            return {
                "exists": False,
                "error": str(e)
            }
