# =============================================================================
# ESP32 Solar Charger API - Docker Compose CORREGIDO para Orange Pi R2S
# =============================================================================

# Este archivo docker-compose.yml debe ser ubicado en ./API_cargador_gel_litio-/esp32_api_docker
# cp docker-compose.yml ./API_cargador_gel_litio-/esp32_api_docker/docker-compose.yml


version: '3.8'

services:
  esp32-api:
    build:
      context: .
      dockerfile: Dockerfile
    
    image: esp32-solar-api:latest
    container_name: esp32-solar-charger-api
    
    # 🔧 CONFIGURACIÓN DE PUERTO SERIAL
    devices:
      - "/dev/ttyACM0:/dev/ttyACM0"  # ← CAMBIAR según tu puerto
    
    # Puertos de red
    ports:
      - "8000:8000"  # API HTTP
    
    # ✅ CONFIGURACIÓN MULTI-CPU CORREGIDA (sintaxis compatible)
    cpus: 4.0                    # Usar 4 CPUs (sintaxis v3.8)
    mem_limit: 1512m             # Límite memoria
    memswap_limit: 1512m         # Límite swap
    
    # ✅ VARIABLES DE ENTORNO CORREGIDAS
    environment:
      # Configuración ESP32
      - SERIAL_PORT=/dev/ttyACM0
      - SERIAL_BAUDRATE=9600
      - SERIAL_TIMEOUT=3.0
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - LOG_LEVEL=INFO
      - MIN_COMMAND_INTERVAL=0.6
      - MAX_REQUESTS_PER_MINUTE=60
      - CACHE_TTL=2
      - TZ=America/Bogota
      
      # ✅ OPTIMIZACIONES MULTI-THREAD (NO QEMU_CPU)
      - OMP_NUM_THREADS=4          # OpenMP threads
      - MALLOC_ARENA_MAX=4         # Malloc arenas
      - PYTHONTHREADS=4            # Python threads
      - UV_THREADPOOL_SIZE=4       # libuv threadpool
      - GOMAXPROCS=4               # Go max processes
      
      # ✅ OPTIMIZACIONES PYTHON
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=0
      
      # ✅ OPTIMIZACIONES SISTEMA
      - MALLOC_MMAP_THRESHOLD_=131072
      - MALLOC_TRIM_THRESHOLD_=131072
    
    # Volúmenes para persistencia
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - /etc/localtime:/etc/localtime:ro
    
    # Política de reinicio
    restart: unless-stopped
    
    # Healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Red
    networks:
      - esp32-network
    
    # ✅ CONFIGURACIÓN AVANZADA COMPATIBLE
    security_opt:
      - seccomp:unconfined
    
    # ✅ LÍMITES DE RECURSOS (sintaxis v3.8)
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    
    # Labels
    labels:
      - "esp32.component=api"
      - "esp32.optimization=multi-cpu"
      - "esp32.cpus=4"

  # ═══════════════════════════════════════════════════════════════════════════
  # REDIS - Cache
  # ═══════════════════════════════════════════════════════════════════════════
  redis:
    image: redis:7-alpine
    container_name: esp32-redis
    command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lru
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    # Límites de recursos
    mem_limit: 128m
    
    networks:
      - esp32-network
    
    labels:
      - "esp32.component=cache"

# ═══════════════════════════════════════════════════════════════════════════
# NETWORKS
# ═══════════════════════════════════════════════════════════════════════════
networks:
  esp32-network:
    driver: bridge

# ═══════════════════════════════════════════════════════════════════════════
# VOLUMES
# ═══════════════════════════════════════════════════════════════════════════
volumes:
  redis_data: