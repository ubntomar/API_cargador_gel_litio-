# =============================================================================
# ESP32 Solar Charger API - Docker Compose CORREGIDO para Orange Pi R2S
# =============================================================================

# Este archivo docker-compose.yml debe estar ubicado en el directorio raíz del proyecto
# Ejecutar desde: ./API_cargador_gel_litio-/


# version: '3.8'  # ← Comentado para evitar warning

services:
  esp32-api:
    build:
      context: .
      dockerfile: Dockerfile
    
    image: esp32-solar-api:latest
    container_name: esp32-solar-charger-api
    
    # 🔧 CONFIGURACIÓN DE PUERTO SERIAL DINÁMICO
    devices:
      - "${SERIAL_PORT:-/dev/ttyUSB0}:${SERIAL_PORT:-/dev/ttyUSB0}"  # Puerto desde .env,  /dev/ttyUSB0 fallback
    
    # Cargar variables desde archivo .env (resuelto automáticamente)
    env_file:
      - .env.resolved
    
    # Puertos de red
    ports:
      - "8000:8000"  # API HTTP
    
    # ✅ CONFIGURACIÓN MULTI-CPU DINÁMICO (compatible con x86/ARM/RISC-V)
    cpus: ${CPU_LIMIT:-4.0}              # Límite CPU desde .env (auto-detección)
    mem_limit: ${MEMORY_LIMIT:-1g}       # Límite memoria desde .env
    memswap_limit: ${MEMORY_LIMIT:-1g}   # Límite swap igual que memoria
    
    # ✅ VARIABLES DE ENTORNO DESDE .env
    environment:
      # Configuración ESP32 (desde .env)
      - SERIAL_PORT=${SERIAL_PORT:-/dev/ttyUSB0}
      - SERIAL_BAUDRATE=${SERIAL_BAUDRATE:-9600}
      - SERIAL_TIMEOUT=${SERIAL_TIMEOUT:-3.0}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MIN_COMMAND_INTERVAL=${MIN_COMMAND_INTERVAL:-0.6}
      - MAX_REQUESTS_PER_MINUTE=${MAX_REQUESTS_PER_MINUTE:-60}
      - CACHE_TTL=${CACHE_TTL:-2}
      - TZ=${TZ:-America/Bogota}
      
      # ✅ REDIS CONFIGURATION
      - REDIS_URL=redis://esp32-redis:6379
      
      # ✅ CONFIGURACIÓN MULTI-CPU DINÁMICO
      - MAX_WORKERS=${MAX_WORKERS:-auto}
      - CPU_LIMIT=${CPU_LIMIT:-auto}
      - MEMORY_LIMIT=${MEMORY_LIMIT:-auto}
      - FORCE_SINGLE_WORKER=${FORCE_SINGLE_WORKER:-false}
      
      # ✅ OPTIMIZACIONES MULTI-THREAD DINÁMICAS
      - OMP_NUM_THREADS=${OMP_NUM_THREADS:-auto}    # OpenMP threads (auto-detección)
      - MALLOC_ARENA_MAX=4         # Malloc arenas
      - UV_THREADPOOL_SIZE=4       # libuv threadpool
      - GOMAXPROCS=4               # Go max processes (si aplica)
      
      # ✅ OPTIMIZACIONES PYTHON
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=0
      
      # ✅ OPTIMIZACIONES SISTEMA
      - MALLOC_MMAP_THRESHOLD_=131072
      - MALLOC_TRIM_THRESHOLD_=131072
    
    # Volúmenes para persistencia y desarrollo
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app/config:rw
      - /etc/localtime:/etc/localtime:ro
      # 🔧 DESARROLLO: Montar código fuente para hot-reload
      - ./api:/app/api:rw
      - ./services:/app/services:rw
      - ./models:/app/models:rw
      - ./core:/app/core:rw
      - ./main.py:/app/main.py:rw
      - ./requirements.txt:/app/requirements.txt:ro
    
    # Política de reinicio
    restart: unless-stopped
    
    # ✅ DEPENDENCIAS - Esperar a que Redis esté listo
    depends_on:
      - redis
    
    # Healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Red
    networks:
      - esp32-network
    
    # ✅ CONFIGURACIÓN AVANZADA COMPATIBLE
    security_opt:
      - seccomp:unconfined
    
    # ✅ LÍMITES DE RECURSOS (sintaxis v3.8)
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    
    # Labels
    labels:
      - "esp32.component=api"
      - "esp32.optimization=multi-cpu-dynamic"
      - "esp32.cpu_detection=auto"
      - "esp32.workers=${MAX_WORKERS:-auto}"

  # ═══════════════════════════════════════════════════════════════════════════
  # REDIS - Cache
  # ═══════════════════════════════════════════════════════════════════════════
  redis:
    image: redis:7-alpine
    container_name: esp32-redis
    command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lru
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    # Límites de recursos
    mem_limit: 128m
    
    networks:
      - esp32-network
    
    labels:
      - "esp32.component=cache"

# ═══════════════════════════════════════════════════════════════════════════
# NETWORKS
# ═══════════════════════════════════════════════════════════════════════════
networks:
  esp32-network:
    driver: bridge

# ═══════════════════════════════════════════════════════════════════════════
# VOLUMES
# ═══════════════════════════════════════════════════════════════════════════
volumes:
  redis_data: