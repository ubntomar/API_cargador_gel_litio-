#!/bin/bash
# =============================================================================
# ESP32 API - Pruebas Completas de Funcionalidad Schedule
# =============================================================================

API_BASE="${1:-http://192.168.8.100:8000}"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${BLUE}üïê ESP32 API - PRUEBAS COMPLETAS DE SCHEDULE${NC}"
echo "API: $API_BASE"
echo "Fecha: $(date)"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 1: VERIFICAR DISPONIBILIDAD DEL SCHEDULE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_schedule_availability() {
    echo -e "\n${PURPLE}üìã 1. VERIFICACI√ìN DE DISPONIBILIDAD${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=3
    
    # Test 1: Health check incluye schedule
    echo -e "\n${CYAN}üîç Health check con schedule...${NC}"
    response=$(curl -s "$API_BASE/health" 2>/dev/null)
    if echo "$response" | grep -q "schedule_manager"; then
        echo -e "   ${GREEN}‚úÖ Schedule manager presente en health check${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Schedule manager no encontrado${NC}"
    fi
    
    # Test 2: Endpoint /schedule/ disponible
    echo -e "\n${CYAN}üîç Endpoint /schedule/ disponible...${NC}"
    response=$(curl -s -w "%{http_code}" "$API_BASE/schedule/" 2>/dev/null)
    http_code="${response: -3}"
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Endpoint /schedule/ respondiendo${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Endpoint /schedule/ no disponible ($http_code)${NC}"
    fi
    
    # Test 3: Schedule info disponible
    echo -e "\n${CYAN}üîç Informaci√≥n de schedule...${NC}"
    response=$(curl -s "$API_BASE/schedule/info" 2>/dev/null)
    if echo "$response" | grep -q "max_duration_hours"; then
        echo -e "   ${GREEN}‚úÖ Informaci√≥n de schedule disponible${NC}"
        max_hours=$(echo "$response" | jq -r '.max_duration_hours' 2>/dev/null)
        echo -e "   ${BLUE}‚ÑπÔ∏è Duraci√≥n m√°xima: ${max_hours} horas${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Informaci√≥n de schedule no disponible${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Resultado Disponibilidad: ${passed}/${total}${NC}"
    return $((total - passed))
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 2: CONFIGURACI√ìN DEL SCHEDULE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_schedule_configuration() {
    echo -e "\n${PURPLE}‚öôÔ∏è 2. PRUEBAS DE CONFIGURACI√ìN${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=8
    
    # Obtener configuraci√≥n inicial
    echo -e "\n${CYAN}üìã Obteniendo configuraci√≥n inicial...${NC}"
    original_config=$(curl -s "$API_BASE/schedule/" 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$original_config" ]; then
        echo -e "   ${GREEN}‚úÖ Configuraci√≥n inicial obtenida${NC}"
        echo "$original_config" | jq '.' 2>/dev/null | head -n 5
    else
        echo -e "   ${RED}‚ùå Error obteniendo configuraci√≥n inicial${NC}"
        return 1
    fi
    
    # Test configuraciones v√°lidas
    echo -e "\n${CYAN}‚öôÔ∏è Pruebas de configuraciones v√°lidas...${NC}"
    
    configs=(
        "true:02:00:7200:2 horas desde 2 AM"
        "true:13:30:10800:3 horas desde 1:30 PM"
        "false:00:00:21600:Deshabilitado"
        "true:23:00:3600:1 hora desde 11 PM"
        "true:12:00:28800:8 horas (m√°ximo)"
    )
    
    for config_info in "${configs[@]}"; do
        IFS=':' read -r enabled start_time duration description <<< "$config_info"
        
        echo -e "\n   ${BLUE}üîß $description${NC}"
        
        response=$(curl -s -w "%{http_code}" \
            -X PUT "$API_BASE/schedule/config" \
            -H 'Content-Type: application/json' \
            -d "{
                \"enabled\": $enabled,
                \"start_time\": \"$start_time\",
                \"duration_seconds\": $duration
            }" 2>/dev/null)
        
        http_code="${response: -3}"
        
        if [[ "$http_code" == "200" ]]; then
            echo -e "      ${GREEN}‚úÖ Configurado correctamente${NC}"
            ((passed++))
        else
            echo -e "      ${RED}‚ùå Error ($http_code)${NC}"
        fi
        
        sleep 0.3
    done
    
    # Test configuraciones inv√°lidas
    echo -e "\n${CYAN}üö´ Pruebas de configuraciones inv√°lidas...${NC}"
    
    invalid_configs=(
        "true:25:00:3600:Hora inv√°lida (25:00)"
        "true:12:60:3600:Minutos inv√°lidos (:60)"
        "true:12:00:28801:Duraci√≥n excesiva (>8h)"
        "true:12:00:0:Duraci√≥n cero"
    )
    
    for config_info in "${invalid_configs[@]}"; do
        IFS=':' read -r enabled start_time duration description <<< "$config_info"
        
        echo -e "\n   ${BLUE}üö´ $description${NC}"
        
        response=$(curl -s -w "%{http_code}" \
            -X PUT "$API_BASE/schedule/config" \
            -H 'Content-Type: application/json' \
            -d "{
                \"enabled\": $enabled,
                \"start_time\": \"$start_time\",
                \"duration_seconds\": $duration
            }" 2>/dev/null)
        
        http_code="${response: -3}"
        
        if [[ "$http_code" == "400" || "$http_code" == "422" ]]; then
            echo -e "      ${GREEN}‚úÖ Rechazado correctamente ($http_code)${NC}"
            ((passed++))
        else
            echo -e "      ${RED}‚ùå Deber√≠a haberse rechazado ($http_code)${NC}"
        fi
        
        sleep 0.3
    done
    
    echo -e "\n${BLUE}üìä Resultado Configuraci√≥n: ${passed}/${total}${NC}"
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 3: TOGGLE MANUAL Y OVERRIDE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_manual_override() {
    echo -e "\n${PURPLE}üîß 3. PRUEBAS DE OVERRIDE MANUAL${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=5
    
    # Configurar schedule activo para las pruebas
    echo -e "\n${CYAN}üìÖ Configurando schedule de prueba...${NC}"
    curl -s -X PUT "$API_BASE/schedule/config" \
        -H 'Content-Type: application/json' \
        -d '{
            "enabled": true,
            "start_time": "00:00",
            "duration_seconds": 21600
        }' > /dev/null 2>&1
    
    # Test 1: Toggle manual b√°sico
    echo -e "\n${CYAN}üîß Toggle manual b√°sico (30 segundos)...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/actions/toggle_load" \
        -H 'Content-Type: application/json' \
        -d '{"hours": 0, "minutes": 0, "seconds": 30}' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Toggle manual ejecutado${NC}"
        ((passed++))
        
        # Verificar que se estableci√≥ el override
        sleep 1
        status=$(curl -s "$API_BASE/actions/status" 2>/dev/null)
        override_active=$(echo "$status" | jq -r '.schedule.manual_override_active' 2>/dev/null)
        
        if [ "$override_active" = "true" ]; then
            echo -e "   ${GREEN}‚úÖ Override manual activado correctamente${NC}"
            ((passed++))
        else
            echo -e "   ${RED}‚ùå Override manual no se activ√≥${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå Error en toggle manual ($http_code)${NC}"
    fi
    
    # Test 2: Clear override
    echo -e "\n${CYAN}üîÑ Limpiar override manual...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/schedule/clear_override" \
        -H 'Content-Type: application/json' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Override limpiado${NC}"
        ((passed++))
        
        # Verificar que se limpi√≥
        sleep 1
        status=$(curl -s "$API_BASE/actions/status" 2>/dev/null)
        override_active=$(echo "$status" | jq -r '.schedule.manual_override_active' 2>/dev/null)
        
        if [ "$override_active" = "false" ]; then
            echo -e "   ${GREEN}‚úÖ Override desactivado correctamente${NC}"
            ((passed++))
        else
            echo -e "   ${RED}‚ùå Override no se desactiv√≥${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå Error limpiando override ($http_code)${NC}"
    fi
    
    # Test 3: Toggle con duraci√≥n m√°xima
    echo -e "\n${CYAN}‚è∞ Toggle con duraci√≥n m√°xima (8 horas)...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/actions/toggle_load" \
        -H 'Content-Type: application/json' \
        -d '{"hours": 8, "minutes": 0, "seconds": 0}' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Toggle 8 horas aceptado${NC}"
        ((passed++))
        
        # Cancelar inmediatamente
        curl -s -X POST "$API_BASE/actions/cancel_temp_off" > /dev/null 2>&1
        curl -s -X POST "$API_BASE/schedule/clear_override" > /dev/null 2>&1
    else
        echo -e "   ${RED}‚ùå Error con toggle 8 horas ($http_code)${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Resultado Override Manual: ${passed}/${total}${NC}"
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 4: HABILITAR/DESHABILITAR SCHEDULE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_enable_disable() {
    echo -e "\n${PURPLE}üîõ 4. PRUEBAS HABILITAR/DESHABILITAR${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=4
    
    # Test 1: Deshabilitar schedule
    echo -e "\n${CYAN}üîõ Deshabilitando schedule...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/schedule/disable" \
        -H 'Content-Type: application/json' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Schedule deshabilitado${NC}"
        ((passed++))
        
        # Verificar estado
        sleep 1
        status=$(curl -s "$API_BASE/schedule/" 2>/dev/null)
        enabled=$(echo "$status" | jq -r '.enabled' 2>/dev/null)
        
        if [ "$enabled" = "false" ]; then
            echo -e "   ${GREEN}‚úÖ Estado 'enabled' = false${NC}"
            ((passed++))
        else
            echo -e "   ${RED}‚ùå Estado 'enabled' no cambi√≥${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå Error deshabilitando ($http_code)${NC}"
    fi
    
    # Test 2: Habilitar schedule
    echo -e "\n${CYAN}üîõ Habilitando schedule...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/schedule/enable" \
        -H 'Content-Type: application/json' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "200" ]]; then
        echo -e "   ${GREEN}‚úÖ Schedule habilitado${NC}"
        ((passed++))
        
        # Verificar estado
        sleep 1
        status=$(curl -s "$API_BASE/schedule/" 2>/dev/null)
        enabled=$(echo "$status" | jq -r '.enabled' 2>/dev/null)
        
        if [ "$enabled" = "true" ]; then
            echo -e "   ${GREEN}‚úÖ Estado 'enabled' = true${NC}"
            ((passed++))
        else
            echo -e "   ${RED}‚ùå Estado 'enabled' no cambi√≥${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå Error habilitando ($http_code)${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Resultado Enable/Disable: ${passed}/${total}${NC}"
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 5: INTEGRACI√ìN CON ACTIONS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_actions_integration() {
    echo -e "\n${PURPLE}üé≠ 5. INTEGRACI√ìN CON ACTIONS${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=3
    
    # Test 1: Actions/status incluye schedule
    echo -e "\n${CYAN}üìä Estado de actions incluye schedule...${NC}"
    response=$(curl -s "$API_BASE/actions/status" 2>/dev/null)
    
    if echo "$response" | grep -q "schedule"; then
        echo -e "   ${GREEN}‚úÖ Schedule presente en actions/status${NC}"
        ((passed++))
        
        # Mostrar informaci√≥n de schedule
        schedule_info=$(echo "$response" | jq '.schedule' 2>/dev/null)
        if [ "$schedule_info" != "null" ]; then
            echo -e "   ${BLUE}‚ÑπÔ∏è Info schedule:${NC}"
            echo "$schedule_info" | jq -r '. | "      Enabled: \(.enabled), Override: \(.manual_override_active)"' 2>/dev/null
        fi
    else
        echo -e "   ${RED}‚ùå Schedule no presente en actions/status${NC}"
    fi
    
    # Test 2: Actions/info incluye informaci√≥n de schedule
    echo -e "\n${CYAN}‚ÑπÔ∏è Actions/info incluye schedule...${NC}"
    response=$(curl -s "$API_BASE/actions/info" 2>/dev/null)
    
    if echo "$response" | grep -q "schedule_integration"; then
        echo -e "   ${GREEN}‚úÖ Informaci√≥n de schedule en actions/info${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Sin informaci√≥n de schedule en actions/info${NC}"
    fi
    
    # Test 3: System/info incluye schedule
    echo -e "\n${CYAN}üñ•Ô∏è System/info incluye schedule...${NC}"
    response=$(curl -s "$API_BASE/system/info" 2>/dev/null)
    
    if echo "$response" | grep -q "schedule"; then
        echo -e "   ${GREEN}‚úÖ Schedule presente en system/info${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Schedule no presente en system/info${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Resultado Integraci√≥n: ${passed}/${total}${NC}"
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN 6: VALIDACIONES Y L√çMITES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
test_validation_limits() {
    echo -e "\n${PURPLE}üõ°Ô∏è 6. VALIDACIONES Y L√çMITES${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local passed=0
    local total=4
    
    # Test 1: L√≠mite 8 horas en configuraci√≥n
    echo -e "\n${CYAN}‚è∞ L√≠mite 8 horas en configuraci√≥n...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X PUT "$API_BASE/schedule/config" \
        -H 'Content-Type: application/json' \
        -d '{
            "enabled": true,
            "start_time": "12:00",
            "duration_seconds": 28801
        }' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "400" || "$http_code" == "422" ]]; then
        echo -e "   ${GREEN}‚úÖ L√≠mite 8 horas respetado en config${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå L√≠mite 8 horas no respetado ($http_code)${NC}"
    fi
    
    # Test 2: L√≠mite 8 horas en toggle
    echo -e "\n${CYAN}‚è∞ L√≠mite 8 horas en toggle...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X POST "$API_BASE/actions/toggle_load" \
        -H 'Content-Type: application/json' \
        -d '{"hours": 8, "minutes": 0, "seconds": 1}' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "400" ]]; then
        echo -e "   ${GREEN}‚úÖ L√≠mite 8 horas respetado en toggle${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå L√≠mite 8 horas no respetado ($http_code)${NC}"
    fi
    
    # Test 3: Formato de hora inv√°lido
    echo -e "\n${CYAN}üïê Formato de hora inv√°lido...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X PUT "$API_BASE/schedule/config" \
        -H 'Content-Type: application/json' \
        -d '{
            "enabled": true,
            "start_time": "25:99",
            "duration_seconds": 3600
        }' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "400" || "$http_code" == "422" ]]; then
        echo -e "   ${GREEN}‚úÖ Formato de hora validado${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Formato de hora no validado ($http_code)${NC}"
    fi
    
    # Test 4: Duraci√≥n m√≠nima
    echo -e "\n${CYAN}‚è±Ô∏è Duraci√≥n m√≠nima (0 segundos)...${NC}"
    response=$(curl -s -w "%{http_code}" \
        -X PUT "$API_BASE/schedule/config" \
        -H 'Content-Type: application/json' \
        -d '{
            "enabled": true,
            "start_time": "12:00",
            "duration_seconds": 0
        }' 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [[ "$http_code" == "400" || "$http_code" == "422" ]]; then
        echo -e "   ${GREEN}‚úÖ Duraci√≥n m√≠nima validada${NC}"
        ((passed++))
    else
        echo -e "   ${RED}‚ùå Duraci√≥n m√≠nima no validada ($http_code)${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Resultado Validaciones: ${passed}/${total}${NC}"
}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FUNCI√ìN PRINCIPAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
run_all_tests() {
    echo -e "\n${BLUE}üöÄ INICIANDO SUITE COMPLETA DE PRUEBAS${NC}"
    
    local total_errors=0
    
    # Verificar conectividad inicial
    echo -e "\n${CYAN}üîç Verificando conectividad...${NC}"
    if curl -s "$API_BASE/health" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API accesible${NC}"
    else
        echo -e "${RED}‚ùå No se puede conectar a la API${NC}"
        echo "Verifica que la API est√© ejecut√°ndose en $API_BASE"
        exit 1
    fi
    
    # Ejecutar todas las pruebas
    test_schedule_availability
    ((total_errors += $?))
    
    test_schedule_configuration
    ((total_errors += $?))
    
    test_manual_override
    ((total_errors += $?))
    
    test_enable_disable
    ((total_errors += $?))
    
    test_actions_integration
    ((total_errors += $?))
    
    test_validation_limits
    ((total_errors += $?))
    
    # Resumen final
    echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${PURPLE}üéØ RESUMEN FINAL DE PRUEBAS${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    if [ $total_errors -eq 0 ]; then
        echo -e "${GREEN}üéâ ¬°TODAS LAS PRUEBAS PASARON!${NC}"
        echo -e "${GREEN}‚úÖ La funcionalidad Schedule est√° completamente operativa${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è Se encontraron $total_errors errores en las pruebas${NC}"
        echo -e "${YELLOW}üîß Revisa los logs para m√°s detalles${NC}"
    fi
    
    echo -e "\n${BLUE}üìä Estado actual del schedule:${NC}"
    curl -s "$API_BASE/schedule/" | jq '.' 2>/dev/null || echo "Error obteniendo estado"
    
    echo -e "\n${BLUE}üïê Hora actual del sistema: $(date)${NC}"
    echo -e "${BLUE}üåê API testeada: $API_BASE${NC}"
    
    return $total_errors
}

# Ejecutar pruebas
run_all_tests